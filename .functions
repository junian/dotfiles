#!/bin/bash

# Open man page as PDF
function manpdf() {
 man -t "${1}" | open -f -a /Applications/Preview.app/
}

# Extra many types of compressed packages
# Credit: http://nparikh.org/notes/zshrc.txt
extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *.rar)      unrar "$1"                            ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
     echo "'$1' is not a valid file to extract"
  fi
}

#cdf : changes director to last activated Finder window.
function cdf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    if [ "$target" != "" ]; then
        cd "$target"; pwd
    else
        echo 'No Finder window found' >&2
    fi
}

#mdview: view markdown as html inside terminal
function mdview()
{
    pandoc -t html $1 | lynx -stdin
}

# brew-dep: get all brew dependencies
function brew-dep()
{
    brew list -1 | while read cask; do echo -ne "\x1B[1;34m $cask \x1B[0m"; brew uses $cask --installed | awk '{printf(" %s ", $0)}'; echo ""; done
}

# brew-source: get all brew list and its source
function brew-source()
{
    brew info $(brew list) | grep '^From:' | sort
}

# brew-cask-source: get all cask list and its source
function brew-cask-source()
{
    brew cask info $(brew cask list) | grep '^From:' | sort
}

# get mysql sock
function mysql-sock()
{
    netstat -ln | grep -o -m 1 '/.*mysql.sock'
}

# get php mysql path
function php-mysql-path()
{
    php -r 'echo ini_get("mysql.default_socket") . "\n";'
}

# init gh-pages
function gh-pages-init()
{
    git checkout --orphan gh-pages
    git rm -rf .
    touch README.md
    git add README.md
    git commit -a -m "First pages commit"
    git push origin gh-pages
}

# cleanup os junk files
function oscleanup()
{
    trashlist=(
        /tmp/*
        ~/Library/Caches/*
        ~/Library/Logs/*
        /var/log/*
        ~/Library/Containers/com.apple.mail/Data/Library/Mail\ Downloads/*
        ~/Library/Developer/Xcode/DerivedData/*
        ~/Library/Developer/Xcode/Archives/*
        ~/Library/Developer/Xcode/iOS\ Device\ Logs/*
        ~/Library/Containers/*/Data/Library/Logs/*
        ~/Library/Containers/*/Data/Library/Caches/*
    )

    for i in "${trashlist[@]}"; do
        trash "${i}"
    done

}

# curl to get title of url
function curl-title() {
    curl -sL $1 | pup 'title text{}'
}

# check if your password is pwned
function passpwned() {
    HASHED_PASS=$(echo -n $1 | shasum -a 1 | awk '{print toupper($1)}')
    echo "Your hashed password: $HASHED_PASS"
    echo "Checking your hashed password to api.pwnedpasswords.com ..."
    PWNED_COUNT=$(curl -s https://api.pwnedpasswords.com/pwnedpassword/$HASHED_PASS)
    echo "Your password is pawned $PWNED_COUNT times"
}

# start vbox vm headless mode
function vbox-start() {
    VBoxManage startvm "$1" --type headless
}

# power off vbox vm
function vbox-stop() {
    VBoxManage controlvm "$1" poweroff
}

