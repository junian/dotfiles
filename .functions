#!/bin/bash

function eof-check() {
  if awk  '/\r$/{exit 0;} 1{exit 1;}' $1
  then
    echo "DOS"
  else
    echo "UNIX"
  fi
}

# Clean bin/ and obj/
function clean-bin-obj() {
  find "$1" -iname "bin" -print0 | xargs -0 trash
  find "$1" -iname "obj" -print0 | xargs -0 trash
}

# Clean node_modules produced by npm
function clean-node_modules() {
  find $HOME/Documents/ -iname "node_modules" -print0 | xargs -0 trash
}

# Open man page as PDF
function manpdf() {
 man -t "${1}" | open -f -a /Applications/Preview.app/
}

# Extra many types of compressed packages
# Credit: http://nparikh.org/notes/zshrc.txt
function extract() {
  if [ -f "$1" ]; then
    case "$1" in
      *.7z)       7z e "$1"                             ;;
      *.tar.bz2)  tar -jxvf "$1"                        ;;
      *.tar.gz)   tar -zxvf "$1"                        ;;
      *.bz2)      bunzip2 "$1"                          ;;
      *.dmg)      hdiutil mount "$1"                    ;;
      *.gz)       gunzip "$1"                           ;;
      *.tar)      tar -xvf "$1"                         ;;
      *.tbz2)     tar -jxvf "$1"                        ;;
      *.tgz)      tar -zxvf "$1"                        ;;
      *.zip)      unzip "$1"                            ;;
      *.ZIP)      unzip "$1"                            ;;
      *.pax)      cat "$1" | pax -r                     ;;
      *.pax.Z)    uncompress "$1" --stdout | pax -r     ;;
      *.Z)        uncompress "$1"                       ;;
      *.rar)      unrar "$1"                            ;;
      *) echo "'$1' cannot be extracted/mounted via extract()" ;;
    esac
  else
     echo "'$1' is not a valid file to extract"
  fi
}

#cdf : changes director to last activated Finder window.
function cdf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    if [ "$target" != "" ]; then
        cd "$target"; pwd
    else
        echo 'No Finder window found' >&2
    fi
}

#mdview: view markdown as html inside terminal
function mdview()
{
    pandoc -t html $1 | lynx -stdin
}

# brew-dep: get all brew dependencies
function brew-dep()
{
    brew list --formula -1 | while read cask; do echo -ne "\x1B[1;34m $cask \x1B[0m"; brew uses $cask --installed | awk '{printf(" %s ", $0)}'; echo ""; done
}

# brew-source: get all brew list and its source
function brew-source()
{
    brew info $(brew list) | grep '^From:' | sort
}

# brew-cask-source: get all cask list and its source
function brew-cask-source()
{
    brew cask info $(brew cask list) | grep '^From:' | sort
}

# get mysql sock
function mysql-sock()
{
    netstat -ln | grep -o -m 1 '/.*mysql.sock'
}

# get php mysql path
function php-mysql-path()
{
    php -r 'echo ini_get("mysql.default_socket") . "\n";'
}

# init gh-pages
function gh-pages-init()
{
    git checkout --orphan gh-pages
    git rm -rf .
    touch README.md
    git add README.md
    git commit -a -m "First pages commit"
    # git push origin gh-pages
}

# cleanup os junk files
function oscleanup()
{
    echo "Cleaning up xcode emulator's data"
    xcrun simctl delete unavailable

    echo "Cleaning up nuget cache"
    nuget locals all -clear

    # echo "Cleaning composer"
    # composer clearcache

    echo "Trashing temporary files"
    trashlist=(
        /tmp/*
        ~/Library/Caches/*
        ~/Library/Logs/*
        #/var/log/*
        ~/Library/Containers/com.apple.mail/Data/Library/Mail\ Downloads/*
        ~/Library/Developer/Xcode/DerivedData/*
        ~/Library/Developer/Xcode/Archives/*
        ~/Library/Developer/Xcode/iOS\ Device\ Logs/*
		~/Library/Developer/Xcode/iOS\ DeviceSupport/*
        ~/Library/Containers/*/Data/Library/Logs/*
        ~/Library/Containers/*/Data/Library/Caches/*
    )

    for i in "${trashlist[@]}"; do
	echo "Trashing ${i}"
        trash "${i}"
    done

}

# curl to get title of url
function curl-title() {
    curl -sL --compressed $1 | pup 'title text{}' | tr -d '\n'
}

# get title
function awk-title() {
    curl -sL --compressed $1 | awk -vRS="</title>" '/<title>/{gsub(/.*<title>|\n+/,"");print;exit}' | tr -d '\n'
}

# check if your password is pwned
function passpwned() {
    HASHED_PASS=$(echo -n $1 | shasum -a 1 | awk '{print toupper($1)}')
    echo "Your hashed password: $HASHED_PASS"
    echo "Checking your hashed password to api.pwnedpasswords.com ..."
    PWNED_COUNT=$(curl -s https://api.pwnedpasswords.com/pwnedpassword/$HASHED_PASS)
    echo "Your password is pawned $PWNED_COUNT times"
}

# start vbox vm headless mode
function vbox-start() {
    VBoxManage startvm "$1" --type headless
}

# power off vbox vm
function vbox-stop() {
    VBoxManage controlvm "$1" poweroff
}

function totp-paste() {
    mkdir -p $HOME/.totp
    umask 0077;pbpaste > $HOME/.totp/.$1
}

function totp() {
    oathtool --totp -b "$(cat $HOME/.totp/.${1})";
}

function hugo-new-episode() {
    hugo new ${1}/$(date +%Y)/${2}
}

function hugo-new-post() {
    hugo new posts/$(date +%Y)/$(date +%m)/${1}
}

function md-to-html() {
   pandoc $1 \
       --to=html5 \
       --css=$HOME/.local/share/markdown-css/tufte.css \
       --highlight-style=haddock \
       --self-contained
}

function cat-md() {
    md-to-html $1 | lynx -stdin
}

function pbcopy-md() {
	md-to-html $1 | textutil -stdin -format html -convert rtf -stdout | pbcopy
}

function md-reference() {
    echo "[$(awk-title $1)]($1)"
}

function magick-crop() {
    convert $1 -geometry 1280x640^ -gravity center -crop 1280x640+0+0 cover-$1
}

function cover-optim() {
	echo "Cropping $1 to 1280x640 and save it into cover-$1"
	magick-crop $1
	
	if [ ${1: -4} == ".png" ]; then
	   echo "It's a PNG, execute ImageOptim with ImageAlpha"
	   imageoptim --imagealpha cover-$1
	elif [ ${1: -4} == ".jpg" ] || [ ${1: -5} == ".jpeg" ]; then
	   echo "It's a JPEG, execute ImageOptim"
	   imageoptim cover-$1
	elif [ ${1: -4} == ".gif" ]; then
		echo "It's a GIF (pronounced gif), execute ImageOptim"
		imageoptim cover-$1
	else
	   echo "Unknown extenstion, trying execute ImageOptim anyway"
	   imageoptim cover-$1
	fi
}

function md-to-docx()
{
  pandoc -o $2 -f markdown -t docx $1
}

function docx-to-md()
{
  pandoc -o $2 -f docx -t markdown $1
}

function docker-stop-rm()
{
  docker stop $1
  docker rm $1
}

function run-mysql57()
{
    GENERATED_ROOT_PASSWORD=`LC_ALL=C tr -dc 'A-Za-z0-9!@#$%^&*()' </dev/urandom | head -c 13 ; echo`

    echo "Login to MySQL with:"
    echo "username: root"
    echo "password: $GENERATED_ROOT_PASSWORD"
    echo "Make sure to write it down."
    echo ""

    docker run \
        -e "MYSQL_ROOT_PASSWORD=$GENERATED_ROOT_PASSWORD" \
        -p 3306:3306 \
        -d \
        mysql:5.7
}

function run-sqlserver-latest()
{
    GENERATED_SA_PASSWORD=`LC_ALL=C tr -dc 'A-Za-z0-9!@#$%^&*()' </dev/urandom | head -c 13 ; echo`

    echo "Login to SQL server with:"
    echo "username: sa"
    echo "password: $GENERATED_SA_PASSWORD"
    echo "Make sure to write it down."
    echo ""

    docker run \
        -e 'ACCEPT_EULA=Y' \
        -e "SA_PASSWORD=$GENERATED_SA_PASSWORD" \
        -p 1433:1433 \
        -d \
        microsoft/mssql-server-linux:2017-latest
}

function display-screen-info()
{
    if command -v pfetch >/dev/null 2>&1; then
        pfetch
    elif command -v fastfetch >/dev/null 2>&1; then
        fastfetch
    elif command -v neofetch >/dev/null 2>&1; then
        neofetch
    elif command -v archey >/dev/null 2>&1; then
        archey --offline
    elif command -v screenfetch >/dev/null 2>&1; then
        screenfetch -E -d '+disk'
    fi
}

function brew-checkformula () 
{
    for formula in `brew list`; do
	dependees=$(brew uses --installed $formula)
	if [ -z "$dependees" ]; then
		echo "$formula"
		
	    # read -p "$formula is not depended on by other formulas. Remove? [Y/n] " -n 1 -r
	    #echo
	fi
    done
}

function turbo-boost-switcher()
{
	sudo launchctl unload /Library/LaunchDaemons/com.turbo-boost-switcher.plist
	sudo launchctl load /Library/LaunchDaemons/com.turbo-boost-switcher.plist
}

function diff-zip() 
{ 
  diff -W200 -y <(unzip -vql $1 | sort -k8) <(unzip -vql $2 | sort -k8); 
}

#region ffmpeg

function ffmpeg-mp4()
{
	ffmpeg -i $1 -c:v libx264 -crf 23 -c:a aac -map_metadata 0 $2
}

# Source: https://superuser.com/a/100290
function ffmpeg-check()
{
    ffmpeg -v error -i $1 -f null - 2>error.log
}

#endregion ffmpeg

function rsync-itunes()
{
	rsync -av ~/Music/ $1:~/storage/music/
}

function exif-scan-no-camera()
{
    exiftool -p '$directory/$filename' -if 'not $model' -r $1
}

#dotnet 
function dotnet-new-maui-page-xaml()
{
     dotnet new maui-page-xaml -o "$1" -n "$2"
}

function dotnet-new-maui-view-xaml()
{
     dotnet new maui-view-xaml -o "$1" -n "$2"
}

#parallels
function parallels-create-macvm()
{
    /Applications/Parallels\ Desktop.app/Contents/MacOS/prl_macvm_create "$1" "$2" --disksize 128000000000
}

function app-bundle-id()
{
    osascript -e "id of app \"$@\""
}

function app-disable-dark-mode()
{
    defaults write "$@" NSRequiresAquaSystemAppearance -bool Yes
}

function clean-ds_store()
{
	find "$1" -name ".DS_Store" -type f -delete
}
